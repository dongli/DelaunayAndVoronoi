# compute the root directory
ROOT_DIR = $(dir $(shell pwd))

# set the source code directories
VPATH = ${ROOT_DIR}/Util:${ROOT_DIR}/Core

# fortran compiler options
FC = gfortran
ifeq ($(FC), ifort)
FFLAGS = -fp-model precise -fp-speculation=safe -fpe0
DEBUG_FLAGS = -g -DDEBUG -check bounds -traceback
OPTIONS += -DFC_IFORT
endif
ifeq ($(FC), gfortran)
FFLAGS =
DEBUG_FLAGS = -g -DDEBUG
OPTIONS += -DFC_GFORTRAN
endif

# external libraries
NETCDF_ROOT = $(strip $(subst /bin/ncdump, , $(shell which ncdump)))
NETCDF_INC = -I${NETCDF_ROOT}/include
NETCDF_LIB = -L${NETCDF_ROOT}/lib -lnetcdf -lcurl

# the rule for building dependencies (refer to "implicit rule")
%.o: %.F90
	@echo " Creating dependency" $@
	@echo $(seperator)
	@${FC} -c $< ${DEBUG_FLAGS} ${OPTIONS} ${FFLAGS} ${NETCDF_INC}

# the rule for building targets (refer to "static pattern rule")
all: start ${TARGET} end

${TARGET}: %: $(addsuffix .F90, %) ${OBJECT}
	@echo " Creating target $@"
	@if [ "${OPTIONS}" != "" ]; then \
             echo " Configurations:"; \
             echo "   ${OPTIONS}"; \
         fi
	@${FC} -o $@ $(addsuffix .F90, $@) \
         ${OBJECT} ${OPTIONS} \
         ${NETCDF_INC} ${NETCDF_LIB} \
         ${LIBRARY} \
         ${DEBUG_FLAGS} ${FFLAGS} && \
         echo " ---> $@ is created"
	@echo ${seperator}

# some decorations
seperator       = "----------------------------------------------"

.PHONY: clean start end
clean:
	@if ls *.o > /dev/null 2>&1; then rm *.o; fi
	@if ls *.mod > /dev/null 2>&1; then rm *.mod; fi
	@if ls *.i90 > /dev/null 2>&1; then rm *.i90; fi
	@for target in ${TARGET}; do if ls $$target > /dev/null 2>&1; then rm $$target; fi; done
	@echo " Project has been cleaned."

start:
	@echo ${seperator}
	@echo " ${PROJECT_NAME}"
	@echo ${seperator}

end:
	@echo " Finished"
	@echo $(seperator)
